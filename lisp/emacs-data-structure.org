#+OPTIONS: toc:t H:3
#+AUTHOR: Luis Xu
#+EMAIL: xuzhengchaojob@gmail.com
#+DATE: <2016-01-22 Thu 23:25>

#+TITLE: Elisp基本数据结构
对Lisp而言, 所有不是cons cell的结构都成为atom.

* Cons Cell
作为一门"面向list"编程的语言, List毫无疑问是lisp最核心
的数据结构, 但List并不是一个"基本数据结构", 它是在Cons Cell
这种类型的基础上建立的. 

Cons Cell结构有两个"槽位"构成, 分别成为"CAR"槽位和"CDR"槽位.
每个槽位都可以放置任意的Lisp结构. 每个List都有一系列的Cons Cell"链接"而成.
所谓链接即List的每个cons cell, 其CDR槽位要么存放下一个cons cell, 要么
存放空list(即nil). 

以List变量 l = >((pine needless) oak maple)为例来解释一下cons cell的概念, 
对于这个list来说, 它的CAR槽位可以通过(car l)来获取, 即(pine needless), 
可以看到该CAR槽位存放的对象仍然为一个list(称其为lcar), 该list同样有两个
槽位, 其CAR槽位为字符串pine. 

List 的CDR槽位可以通过(cdr list)来获取, 以上面的l为例, 其CDR槽位为(oak maple),
同样为一个list对象(称其为lcdr). 对于lcdr, 其CDR槽位为(maple), 仍然为一个list
(称其为llcdr), llcdr的CAR槽位为maple, CDR槽位为nil.
可以通过下图来展示上面的例子
#+BEGIN_EXAMPLE
      --------------       --------------       --------------
     | car   | cdr  |     | car   | cdr  |     | car   | cdr  |
     |   o   |   o------->| oak   |   o------->| maple |  nil |
     |   |   |      |     |       |      |     |       |      |
      -- | ---------       --------------       --------------
         |
         |
         |        --------------       ----------------
         |       | car   | cdr  |     | car     | cdr  |
          ------>| pine  |   o------->| needles |  nil |
                 |       |      |     |         |      |
                  --------------       ----------------
#+END_EXAMPLE
 
一个cons cell可以用下面的方式表示 (A . B). 这里该cons cell的CAR槽位为A,
CDR槽位为B, 对于上面的list l, 其完整的表示为. 不过在lisp编码中一般
使用上面例子的形式, 除非需要明确指定CDR槽为一个既不为cons cell, 又不为nil的
对象.
#+BEGIN_EXAMPLE
((pine . (needless . nil)) . (oak . (maple . nil))))
#+END_EXAMPLE 

* 数组
在Emacs Lisp, 数组是指一个固定长度的对象, 里面的每一个元素都占据
该数组的一个"槽位".  Emacs中的数组可分为四种类型: Vector, String, 
Char-table, Bool-vector. 对这四种类型的操作可以使用通用的数组函数.
** 通用数组函数
| 原型               | 功能                          |
|--------------------+-------------------------------|
| (arrayp x)         | 如果x是数组返回t              |
| (aref a index)     | 返回第index个元素, 0开始      |
| (aset a index obj) | 将第index元素设为obj, 返回obj |
| (fillarray a obj)  | 全部设为obj                   |

** 向量(Vector)
在Emacs lisp中,向量通过中括号表示, 里面包含任意类型的对象. 
例如 [1 "two" (three)]. 下表是vector特有的函数:
| 原型                | 功能                             |
|---------------------+----------------------------------|
| (vectorp v)         | 检查是否为vector                 |
| (vector ..)         | 生成vector                       |
| (make-vector N obj  | 生成N个obj的vector               |
| (vconcat x y z ...) | 将所有参数的元素组合成一个vector |
