#+OPTIONS: toc:t H:3
#+AUTHOR: Luis Xu
#+EMAIL: xuzhengchaojob@gmail.com
#+DATE: <2015-12-13 Thu 23:25>

#+TITLE: Orgmode手册4:任务功能
个人私以为, 任务功能是org mode最熠熠生辉的特性之一, 
它完美的诠释了[[https://zh.wikipedia.org/wiki/GTD][GTD]] 的理念, 如果你是一个需要时间管理, 工作离不开
"任务清单"的人, org mode绝对是一个满足你需求的绝佳工具. 

下面这张图可以很直观的展示org mode的TODO特性:

file:../../../../public/img/orgmode-todo.png

该图展示了一个工程的各个阶段, 通过这张图可以很直观的查看
当前工程的运行情况和完成比, 当项目为完成时, 其状态为 *TODO*, 
当其完成后, 将状态该为 *DONE*, 同时会自动修改父项目的状态, 如果
所有的子项目都完成, 父项目会自动设为 *DONE*, 否则会展示一个完成比率.

通过该图相信你已经了解了org mode的TODO的概念, 下面是具体的实现文档.

* 创建TODO项目
在标题的星号后面加上 *TODO* 即可将该标题设置为一个TODO任务, 也可以使用
快捷键来创建, 快捷键可以参考这篇文章 [[http://xuzhengchao.com/2015/12/12/org-mode-outline.html][org mode手册(1): 文档结构]]

如果任务完成后, 可以使用 "C-c C-t" 快捷键将其设为DONE.

* 拓展关键字
在真实的使用场景中, 一个任务可能不仅仅只有TODO和DONE两个状态, 可能会有一些
中间状态, 或者你觉得TODO和DONE不是符合你风格的两个关键字, 针对这种情况, org mode
提供了一些功能来对TODO关键字进行扩展.
** 设置关键字
通过在emacs配置文件中设置 *org-mode-keywords* 来自定义TODO关键字, 如下例, 
这里设置了TODO/FEEDBACK/VERIFY和DONE/DELEGATED两组关键字,
第一组关键字处于项目的"未完成"阶段, 第二组关键字处于项目的"完成"阶段, 
通过 "|"来区分划分这两个阶段. 当使用"C-c C-t"时, 标题会轮番在这几个关键字
之间修改.
   #+BEGIN_EXAMPLE
    (setq org-todo-keywords
       '((sequence "TODO" "FEEDBACK" "VERIFY" "|" "DONE" "DELEGATED")))
   #+END_EXAMPLE
** 设置多组关键字
有时候你想将任务划分的更细, 例如状态未"TODO"的任务只能将状态改为"DONE",
状态未"BUG"的任务只能改为"FIXED"(不能设成DONE), 那么可以通过 *sequence*
关键字来实现这个功能, 如下例, 该例创建了三组关键字, 状态修改只能在本组的
关键字之间变化, 而不能跨组变化.
#+BEGIN_EXAMPLE
    (setq org-todo-keywords
           '((sequence "TODO(t)" "|" "DONE(d)")
             (sequence "REPORT" "BUG" "KNOWNCAUSE" "|" "FIXED")
             (sequence "|" "CANCELED")))

#+END_EXAMPLE
** 使用type.
  该变量可以将TODO设置为不同的类型, 如下例, 这样可以实现将任务分配给不同的人,
  分配完成后, C-c C-t修改状态时不会在这三个type之间滚动.而是直接设为done
  #+BEGIN_EXAMPLE
  (setq org-todo-keywords '((type "Fred" "Sara" "Lucy" "|" "DONE")))
  #+END_EXAMPLE
** 在当前文件设置关键字
上面几节讲到都是在全局配置文件中配置关键字, 
如果想只把配置限制在当前文件, 可以在文件开头配置相关关键字, 如下例:
#+BEGIN_EXAMPLE
     #+TODO: TODO FEEDBACK VERIFY | DONE CANCELED ;; 拓展关键字

     #+TYP_TODO: Fred Sara Lucy Mike | DONE ;; 设置type

     ;;设置多组
     #+TODO: TODO | DONE
     #+TODO: REPORT BUG KNOWNCAUSE | FIXED
     #+TODO: | CANCELED

#+END_EXAMPLE
** 关键字主题
如果嫌弃官方的关键字颜色不好看, 可以通过设置"org-todo-keyword-faces"变量可以设置不同关键字的表现形式,例如:
#+BEGIN_EXAMPLE
     (setq org-todo-keyword-faces
           '(("TODO" . org-warning) ("STARTED" . "yellow")
             ("CANCELED" . (:foreground "blue" :weight bold))))


#+END_EXAMPLE
** 设置依赖
有时候一个TODO可能依赖其他的TODO, 例如一个系列项目, 可能前面的项目完成
之前, 后面的项目都不能将状态改成DONE, 或者子项目完成之前, 父项目不能将
状态改成DONE.
1. org-enforce-todo-dependencies.
   通过设置该变量, 可以设置在所有的子标题都完成之前, 父标题不能将状态设置为DONE.
   #+BEGIN_EXAMPLE
   (setq org-enforce-todo-dependencies t)
   #+END_EXAMPLE
2. 按顺序修改状态.
   通过设置属性"ORDERED"来控制同级标题之前按顺序修改状态, 在前面的标题完成之前
   后面的标题不能将属性设为DONE.
   #+BEGIN_EXAMPLE
     * Parent
       :PROPERTIES:
       :ORDERED: t
       :END:
     ** TODO a
     ** TODO b, needs to wait for (a)
     ** TODO c, needs to wait for (a) and (b)
   #+END_EXAMPLE
* 时间戳
对于时间管理来说, 时间戳是必不可少的东西, 可以通过为项目设置
"排期(SCHEDULED)"或"最后期限(DEADLINE)"来更合理的规划工程. 
更详细的日期功能会在下一篇文章讲述.
** 设置完成时间
可以加入设置下面两个配置之一来自动在状态改成DONE的时候加入当前时间戳:
其中第二个配置还会要求你写一段完成的note.
#+BEGIN_EXAMPLE
(setq org-log-done 'time)
(setq org-log-done 'note)
#+END_EXAMPLE
** 记录状态变化
下面的配置用于记录状态之间的变化, 可以通过设置带"附加属性"的keywords来实现
这一个. 在keyword后面的括号中与状态记录相关字符为:
+ "!" 表示记录时间
+ "@" 表示带时间的note
+ "/!" 当跳转到一个没有附加属性的状态时, 记录时间或note
#+BEGIN_EXAMPLE
     (setq org-todo-keywords
       '((sequence "TODO(t)" "WAIT(w@/!)" "|" "DONE(d!)" "CANCELED(c@)")))
#+END_EXAMPLE

也可以使用PROPERTIES属性 "LOGGING" 来修改某个标题的TODO附加属性, 
如果LOGGING为nil,表示没有附加记录. 也可以使用 "logrepeat" 或 
"lognotedone" 使用默认属性, 例如下例, 这个配置会修改TODO只添加时间戳,
WAIT需要note, 其他的属性使用STARTUP的默认值.
#+BEGIN_EXAMPLE
     * TODO Log each state with only a time
       :PROPERTIES:
       :LOGGING: TODO(!) WAIT(@) logrepeat
       :END:
#+END_EXAMPLE
** 追踪行为
使用属性STYLE habit来设置持久性行为, 如下例, 表示至少4天或至多2天
*刮一次胡子*.
#+BEGIN_EXAMPLE
  ** TODO Shave
   'S CHEDULEd: <2015-12-08 Tue .+2d/4d>
  :PROPERTIES:
  :STYLE:    habit
  :END:
#+END_EXAMPLE
* 优先级
Org支持TODO项目的优先级, 默认支持的优先级有三个:A, B, C. A最高.
如下所示, 无优先级表示的项目优先级是B.
#+BEGIN_EXAMPLE 
  ** TODO [#A] 
#+END_EXAMPLE
* 显示任务完成比
可以在标题中加入 "[/]" 或 "[%]" 来显示子任务的完成数.
默认只显示子标题, 如果要递归显示整个树, 需要设置
"org-hierarchical-todo-statistics", 或者在PROPERTIES中设置
"COOKIE_DATA", 如下所示;
#+BEGIN_EXAMPLE
     * Parent capturing statistics [2/20]
       :PROPERTIES:
       :COOKIE_DATA: todo recursive
       :END:
#+END_EXAMPLE

如果当子任务都完成时, 父任务自动标记为DONE, 可以在.emacs中加入
如下代码:
#+BEGIN_EXAMPLE
(defun org-summary-todo (n-done n-not-done)
  "Switch entry to DONE when all subentries are done, to TODO otherwise."
  (let (org-log-done org-log-states)   ; turn off logging
    (org-todo (if (= n-not-done 0) "DONE" "TODO"))))
(add-hook 'org-after-todo-statistics-hook 'org-summary-todo)
#+END_EXAMPLE
* 附录: "TODO"快捷键 						   :shortkey:
|                     | 说明               |
|---------------------+--------------------|
| C-c C-t             | 修改项目状态       |
| S-right/left        | 同上               |
| C-u C-c C-t         | 选择状态           |
| C-c / t(T)          | 显示todo 树        |
| C-c a t             | 显示全局todo       |
| S-M-RET             | 插入TODO           |
| C-c C-x o           | 打开ORDERED属性    |
| C-u C-u C-u C-c C-t | 强制修改状态       |
| C-c ,               | 设置优先级         |
| S-up/down           | 更改优先级         |
| C-c #               | 更新当前标题完成率 |
|                     |                    |
