#+OPTIONS: toc:t H:3
#+AUTHOR: Luis404
#+EMAIL: luisxu404@gmail.com

#+TITLE: Memory Optimization
(持续更新)

For a Samsung Galaxy Note 4 memory usage high issue: Setting->App->Running.
(Not that high in Nexus5).Try to analyze why this happens.

* GC_XXX logs
After first install and run, the memory usage is about 200MB.
about 20+ GC_FOR_ALLOC logs show. as this

#+BEGIN_QUOTE
// GC_FOR_ALLOC: A garbage collection caused because your app attempted to allocate memory when 
// your heap was already full, so the system had to stop your app and reclaim memory.
02-02 15:51:24.227  8351  8351 D dalvikvm: GC_FOR_ALLOC freed 2786K, 12% free 75674K/85580K, paused 62ms, total 62ms
#+END_QUOTE

Do some image related operations(wallpaper,recommendation...), the memory become 260+MB, 
More GC_FOR_ALLOC logs show, and serveral GC_EXPLICIT logs.

"GC_EXPLICIT
An explicit garbage collection, such as when you call gc() 
(which you should avoid calling and instead trust the garbage collector to run when needed)."

From the GC logs, check if *75674K/85580K* is continue growing, if so, there maybe leak.
* DDMS VM heap
Use ddms vm heap feature to chech the heap change while interacting with app,
as blew.

file:../../../assets/images/ddmsvmheap.png

From the image, the 1-byte array mallocs about 84MB, the *56byte* malloc is
about more than 2000.
* Allocation Tracker
Allcation Tracker can show all the allocations and the code path.
* dumpsys meminfo pid/packagename
This command used to  lists all of your app's current allocations, measured in kilobytes.

Import columns and line combinations need concerded:
1. Dalvik heap + private dirty.
   It's your app's heap allocation.
2. .dex mmap + private clean.
   The own code size of your app.
3. Unknow + private Dirty.
   Allocation belongs to your app but can't classified by system.
4. private dirty column.
   Your own memory use, this memory is pages that been modified, 
   so must stay in memory.
5. private clean colum.
   Still your apps own memory alloc, but not modified, then can be 
   paged out.
6. *Appcontext and Activity*.
   A very important part to track activity memory leak.

Below is a dumpsys meminfo output, there maybe activity leak, because 
when the first activity called *finish()*, and we suppose it be recycled
after GC. But it's not.

#+Begin_SRC c
MEMINFO in pid 10391 [com.luis.404] 
                   Pss  Private  Private  Swapped     Heap     Heap     Heap
                 Total    Dirty    Clean    Dirty     Size    Alloc     Free
                ------   ------   ------   ------   ------   ------   ------
  Native Heap       48       48        0        0    53504     7614    25489
  Dalvik Heap    18984    18860        0        0    34808    26160     8648
 Dalvik Other     3772     3740        0        0                           
        Stack      152      152        0        0                           
    Other dev     3388     3380        8        0                           
     .so mmap     4759     3576      620        0                           
    .jar mmap        4        0        4        0                           
    .apk mmap      343        0      228        0                           
    .ttf mmap        1        0        0        0                           
    .dex mmap     5851       80     5340        0                           
   Other mmap        8        4        0        0                           
      Unknown    27345    27344        0        0                           
        TOTAL    64655    57184     6200        0    88312    33774    34137
 
 Objects
               Views:       19         ViewRootImpl:        1
         AppContexts:        5           Activities:        2
              Assets:        5        AssetManagers:        5
       Local Binders:       78        Proxy Binders:       24
    Death Recipients:        0
     OpenSSL Sockets:        3
 
 SQL
         MEMORY_USED:     1103
  PAGECACHE_OVERFLOW:      667          MALLOC_SIZE:       62
#+END_SRC
* dumpsys procstats packagename
* heap dump
It will dump to a hprof file.
* some good post online
[[http://blog.hsc.com/android/technology-trends/android-memory-optimization/]]
[[https://developer.android.com/tools/debugging/debugging-memory.html]]
